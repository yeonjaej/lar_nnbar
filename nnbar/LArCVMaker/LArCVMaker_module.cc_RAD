// framework includes
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Core/EDAnalyzer.h"
#include "art/Framework/Services/Optional/TFileService.h"
#include "fhiclcpp/ParameterSet.h"

// data product includes
#include "larcore/Geometry/Geometry.h"
#include "lardataobj/RecoBase/Wire.h"
#include "lardataobj/RawData/RawDigit.h"
#include "lardataobj/RawData/raw.h"

#include "nusimdata/SimulationBase/MCTruth.h"
//#include "lardataobj/Simulation/SupernovaTruth.h"

// root includes
#include "TFile.h"
#include "TTree.h"
#include "TH1D.h"

// c++ includes
#include <vector>
#include <iterator>
#include <typeinfo>
#include <memory>
#include <string>
#include <algorithm>
#include <cmath>
#include <map>

// local includes
#include "DataFormat/EventImage2D.h"
#include "DataFormat/EventROI.h"
#include "DataFormat/IOManager.h"

#include <iostream>
#include <fstream>

namespace nnbar {

class LArCVMaker : public art::EDAnalyzer {
  
public:

  explicit LArCVMaker(fhicl::ParameterSet const & pset);
  void analyze(art::Event const& evt);
  void beginJob();
  void endJob();
  

private:

  void ClearData();
  void ResetROI();
  void SetROISize();
  int FindAPAWithNeutrino(std::vector<int> apas, art::Event const & evt);
  int FindROI(int apa, int plane);

  larcv::IOManager fMgr;

  std::string fWireModuleLabel;
  int fMaxTick;
  int fADCCut;
  int fEventType;

  int fFirstWire;
  int fLastWire;
  int fFirstTick;
  int fLastTick;

  const int fNumberChannels[3] = { 800, 800, 960 };
  const int fFirstChannel[3] = { 0, 800, 1600 };
  const int fLastChannel[3] = { 799, 1599, 2559 };

  int fEvent;
  int fAPA;
  int fNumberWires;
  int fNumberTicks;

  std::map<int,std::vector<float>> fWireMap;
  //std::ofstream pdg;
  TH1D* hADCSpectrum;
  TFile* SpectrumFile;
  std::ofstream pdg;
}; // class LArCVMaker

LArCVMaker::LArCVMaker(fhicl::ParameterSet const & pset) :
    EDAnalyzer(pset),
    fMgr(larcv::IOManager::kWRITE),
    fWireModuleLabel(pset.get<std::string>("WireModuleLabel")),
    fMaxTick(pset.get<int>("MaxTick")),
    fADCCut(pset.get<int>("ADCCut")),
    fEventType(pset.get<int>("EventType"))
{} // function LArCVMaker::LArCVMaker

void LArCVMaker::beginJob() {
  std::ofstream pdg;
  
  std::string filename;
  if (std::getenv("PROCESS") != nullptr) filename = "larcv_" + std::string(std::getenv("PROCESS")) + ".root";
  else filename = "larcv.root";
  fMgr.set_out_file(filename);
  fMgr.initialize();
  SpectrumFile = new TFile("./SignalADCSpectrum.root","RECREATE");
  hADCSpectrum = new TH1D("hADCSpectrum","ADC Spectrum Collection; ADC; Entries",4096, 0, 4096);
} // function LArCVMaker::beginJob

void LArCVMaker::endJob() {
  
  SpectrumFile->cd();
  hADCSpectrum->Write();
  SpectrumFile->Close();
  fMgr.finalize();
} // function LArCVMaker::endJob

void LArCVMaker::ClearData() {

  ResetROI();
  fAPA = -1;
  fWireMap.clear();
} // function LArCVMaker::ClearData

void LArCVMaker::ResetROI() {

  fFirstWire = -1;
  fLastWire = -1;
  fFirstTick = -1;
  fLastTick = -1;
  fNumberWires = -1;
  fNumberTicks = -1;
} // function LArCVMaker::ResetROI

void LArCVMaker::SetROISize() {

  fNumberWires = fLastWire - fFirstWire + 1;
  fNumberTicks = fLastTick - fFirstTick + 1;
}

int LArCVMaker::FindAPAWithNeutrino(std::vector<int> apas, art::Event const & evt) {

  //int fVertexAPA =-1;  
  int best_apa = -1;

  best_apa = rand() % 12;

  return best_apa;

} // function LArCVMaker::FindBestAPA

int LArCVMaker::FindROI(int best_apa, int plane) {
  
  ResetROI();

  std::cout << "setting ROI as full APA" <<std::endl;

  fFirstTick=0;
  fLastTick=4487;

  if (plane==0) {
    fFirstWire = (2560*best_apa);
    fLastWire = (2560*best_apa)+799;
  }

  if (plane==1) {
    fFirstWire = (2560*best_apa)+800;
    fLastWire = (2560*best_apa)+1599;
  }

  if (plane==2) {
    fFirstWire = (2560*best_apa)+1600;
    fLastWire = (2560*best_apa)+2559;
  }
  std::cout <<"ROI set!"<<std::endl; 
 
  
  SetROISize();

  int downsample = 1;
  return downsample;
} // function LArCVMaker::FindROI

void LArCVMaker::analyze(art::Event const & evt) {

  ClearData();
  pdg.open("radiologicals.txt",std::ios_base::app);
  // get event number
  fEvent = evt.event();
  pdg << fEvent;
  fMgr.set_id(evt.id().run(),evt.id().subRun(),evt.id().event());

  int fVertexAPA =-1;
  int ar39Gen = 0;
  int ar42Gen = 0;
  int cNeutronGen = 0;
  int po210Gen = 0;
  int rn222Gen = 0;
  int cpaGen = 0;
  int apaGen = 0;
  int kr85Gen = 0;

  // get wire objects
  art::Handle<std::vector<raw::RawDigit>> wireh;
  evt.getByLabel(fWireModuleLabel,wireh);

  // initialize ROI finding variables
  std::vector<int> apas;

  // fill wire map
  for (std::vector<raw::RawDigit>::const_iterator it = wireh->begin();
      it != wireh->end(); ++it) {
    const raw::RawDigit & rawr = *it;

      
    raw::RawDigit::ADCvector_t adc(rawr.Samples());
    raw::Uncompress(rawr.ADCs(), adc, rawr.Compression());

    fWireMap.insert(std::pair<int,std::vector<float>>(rawr.Channel(),std::vector<float>(adc.begin(),adc.end())));
    int apa = std::floor(rawr.Channel()/2560);
    if (std::find(apas.begin(),apas.end(),apa) == apas.end())
      apas.push_back(apa);
  }

  // find best APA
  if (apas.size() == 0) {
    std::cout << "Skipping event. No activity inside the TPC!" << std::endl;
    return;
  }
  int best_apa = FindAPAWithNeutrino(apas,evt);
  if (best_apa != -1) fAPA = best_apa;
  else {
    std::cout << "Skipping event. Could not find good APA!" << std::endl;
    return;
  }
  std::cout << fAPA<<std::endl;

  // check for problems
  for (int it_plane = 0; it_plane < 3; ++it_plane) {
    if (FindROI(best_apa,it_plane) == -1) {
      std::cout << "Skipping event. Could not find good ROI in APA!" << std::endl;
      return;
    }
  }

  // produce image
  auto images = (larcv::EventImage2D*)(fMgr.get_data(larcv::kProductImage2D, "tpc"));
  std::cout << std::endl;
  for (int it_plane = 0; it_plane < 3; ++it_plane) {
    int downsample = FindROI(best_apa,it_plane);
    std::cout << "downsampleing? " << downsample << std::endl;
    std::cout << "PLANE " << it_plane << " IMAGE" << std::endl;
    std::cout << "Original image resolution " << fNumberWires << "x" << fNumberTicks;
    larcv::Image2D image(fNumberWires,fNumberTicks);
    for (int it_channel = 0; it_channel < fNumberWires; ++it_channel) {
      int channel = it_channel + fFirstWire;
      for (int it_tick = 0; it_tick < fNumberTicks; ++it_tick) {
        int tick = it_tick + fFirstTick;
        if (fWireMap.find(channel) != fWireMap.end()) {
	  image.set_pixel(it_channel,it_tick,fWireMap[channel][tick]);
	  if (it_plane ==2) hADCSpectrum->Fill(fWireMap[channel][tick]);
	}
      }
    }
    //yj commented this out june 20th 2019
    // image.compress(fNumberWires/downsample,fNumberTicks/(4*downsample));
    //std::cout << " => downsampling to " << fNumberWires/downsample << "x" << fNumberTicks/(4*downsample) << "." << std::endl << std::endl;
    //image.resize(600,600,0);
    //std::cout << "resized to 600 x 600" << std::endl;
    images->Emplace(std::move(image));
    std::cout << "emplace done" << std::endl;
  }
  
  auto roi_v = (larcv::EventROI*)(fMgr.get_data(larcv::kProductROI, "tpc"));

  larcv::ROI roi((larcv::ROIType_t)fEventType);

  //radiological truths
  art::ServiceHandle<geo::Geometry> geo;

  art::Handle<std::vector<simb::MCTruth>> TruthListHandle;
  std::vector<art::Ptr<simb::MCTruth>> TruthList;
  //ar39                                                                                                         
  if (evt.getByLabel("ar39Gen",TruthListHandle))
    art::fill_ptr_vector(TruthList,TruthListHandle);

  art::Ptr<simb::MCTruth> mct = TruthList[0];
  std::cout<< "mct nparticles " << mct->NParticles() << std::endl;

  for (int it = 0; it < mct->NParticles(); ++it) {
    simb::MCParticle part = mct->GetParticle(it);
    TVector3 vertex_position = mct->GetParticle(it).Position(0).Vect();
    // Loop over APA to know which one contains the particle                                                     
    for (size_t it_tpc = 0; it_tpc < geo->NTPC(); ++it_tpc) {
      const geo::TPCGeo & tpc = geo->TPC(it_tpc);
      if (tpc.ContainsPosition(vertex_position)) {
        fVertexAPA = std::floor((float)it_tpc/2);
        //std::cout << "particles is in " << fVertexAPA << std::endl;                                            
        if( fVertexAPA == best_apa ) ar39Gen = ar39Gen + 1;
      }
    }
  }
  //std::cout << "event number is: " << eventNumber <<std::endl;                                                 
  std::cout << "total ar39 is: " << ar39Gen <<std::endl;
  pdg << " ar39: " << ar39Gen;

  std::cout<< "ar39 appended to file" <<std::endl;
  //pdg.close();                                                                                                 
  //std::cout << "ar39 appended to file" << std::endl;                                                           

  //ar42                                                                                                         
  art::Handle<std::vector<simb::MCTruth>> TruthListHandle2;
  std::vector<art::Ptr<simb::MCTruth>> TruthList2;


  if (evt.getByLabel("ar42Gen",TruthListHandle2))
    art::fill_ptr_vector(TruthList2,TruthListHandle2);
  // Do we need another loop over MCTruth objects?                                                               
  art::Ptr<simb::MCTruth> mct2 = TruthList2[0];
  //std::cout<< "truth list size" << TruthList2.size() << std::endl;                                             
  //std::cout<< "mct nparticles " << mct2->NParticles() << std::endl;                                            
  // Loop over particles ib MCTruth                                                                              
  for (int it = 0; it < mct2->NParticles(); ++it) {
    simb::MCParticle part = mct2->GetParticle(it);
    //std::cout << "PDG " << part.PdgCode() << std::endl;                                                        

    TVector3 vertex_position = mct2->GetParticle(it).Position(0).Vect();
    //std::cout<<vertex_position.x() <<"," <<vertex_position.y() <<"," <<vertex_position.z() <<std::endl;        
    // Loop over APA to know which one contains the particle                                                     
    for (size_t it_tpc = 0; it_tpc < geo->NTPC(); ++it_tpc) {
      const geo::TPCGeo & tpc = geo->TPC(it_tpc);

      if (tpc.ContainsPosition(vertex_position)) {
        fVertexAPA = std::floor((float)it_tpc/2);
        //std::cout << "particles is in " << fVertexAPA << std::endl;                                            
        if( fVertexAPA == best_apa ) ar42Gen = ar42Gen + 1;

      }
    }
  }

  std::cout << "total ar42 is: " <<ar42Gen <<std::endl;
  pdg << " ar42: " << ar42Gen;

  std::cout << "ar42 appended to file" <<std::endl;

  //std::cout << "ar42 appended" << std::endl;                                                                   

  //kr85                                                                                                         
  art::Handle<std::vector<simb::MCTruth>> TruthListHandle3;
  std::vector<art::Ptr<simb::MCTruth>> TruthList3;


  if (evt.getByLabel("kr85Gen",TruthListHandle3))
    art::fill_ptr_vector(TruthList3,TruthListHandle3);
  // Do we need another loop over MCTruth objects?                                                               
  art::Ptr<simb::MCTruth> mct3 = TruthList3[0];
  //std::cout<< "truth list size" << TruthList2.size() << std::endl;                                             
  //std::cout<< "mct nparticles " << mct2->NParticles() << std::endl;                                            
  // Loop over particles ib MCTruth                                                                              
  for (int it = 0; it < mct3->NParticles(); ++it) {
    simb::MCParticle part = mct3->GetParticle(it);
    //std::cout << "PDG " << part.PdgCode() << std::endl;                                                        

    TVector3 vertex_position = mct3->GetParticle(it).Position(0).Vect();
    //std::cout<<vertex_position.x() <<"," <<vertex_position.y() <<"," <<vertex_position.z() <<std::endl;        
    // Loop over APA to know which one contains the particle                                                     
    for (size_t it_tpc = 0; it_tpc < geo->NTPC(); ++it_tpc) {
      const geo::TPCGeo & tpc = geo->TPC(it_tpc);

      if (tpc.ContainsPosition(vertex_position)) {
        fVertexAPA = std::floor((float)it_tpc/2);
        //std::cout << "particles is in " << fVertexAPA << std::endl;    
        if( fVertexAPA == best_apa ) kr85Gen = kr85Gen + 1;

      }
    }
  }

  std::cout << "total kr85 is: " <<kr85Gen <<std::endl;
  pdg << " kr85: " << kr85Gen;
  //rn222                                                                                                        
  art::Handle<std::vector<simb::MCTruth>> TruthListHandle4;
  std::vector<art::Ptr<simb::MCTruth>> TruthList4;


  if (evt.getByLabel("rn222Gen",TruthListHandle4))
    art::fill_ptr_vector(TruthList4,TruthListHandle4);
  // Do we need another loop over MCTruth objects?                                                               
  art::Ptr<simb::MCTruth> mct4 = TruthList4[0];
  //std::cout<< "truth list size" << TruthList2.size() << std::endl;                                             
  //std::cout<< "mct nparticles " << mct2->NParticles() << std::endl;                                            
  // Loop over particles ib MCTruth                                                                              
  for (int it = 0; it < mct4->NParticles(); ++it) {
    simb::MCParticle part = mct4->GetParticle(it);
    //std::cout << "PDG " << part.PdgCode() << std::endl;  

    TVector3 vertex_position = mct4->GetParticle(it).Position(0).Vect();
    //std::cout<<vertex_position.x() <<"," <<vertex_position.y() <<"," <<vertex_position.z() <<std::endl;        
    // Loop over APA to know which one contains the particle                                                     
    for (size_t it_tpc = 0; it_tpc < geo->NTPC(); ++it_tpc) {
      const geo::TPCGeo & tpc = geo->TPC(it_tpc);

      if (tpc.ContainsPosition(vertex_position)) {
        fVertexAPA = std::floor((float)it_tpc/2);
        //std::cout << "particles is in " << fVertexAPA << std::endl;                                            
        if( fVertexAPA == best_apa ) rn222Gen = rn222Gen + 1;

      }
    }
  }
  pdg << " rn222: "<<rn222Gen;
  std::cout << "total rn222 is: " <<rn222Gen <<std::endl;

  //po210                                                                                                        
  art::Handle<std::vector<simb::MCTruth>> TruthListHandle5;
  std::vector<art::Ptr<simb::MCTruth>> TruthList5;


  if (evt.getByLabel("po210Gen",TruthListHandle5))
    art::fill_ptr_vector(TruthList5,TruthListHandle5);

  // Do we need another loop over MCTruth objects?                                                               
  art::Ptr<simb::MCTruth> mct5 = TruthList5[0];
  //std::cout<< "truth list size" << TruthList2.size() << std::endl;                                             
  std::cout<< "TOTAL po210 in all APAs is " << mct5->NParticles() << std::endl;
  // Loop over particles ib MCTruth                                                                              
  for (int it = 0; it < mct5->NParticles(); ++it) {
    simb::MCParticle part = mct5->GetParticle(it);
    //std::cout << "PDG " << part.PdgCode() << std::endl;                                                        

    TVector3 vertex_position = mct5->GetParticle(it).Position(0).Vect();
    //std::cout<<vertex_position.x() <<"," <<vertex_position.y() <<"," <<vertex_position.z() <<std::endl;        
    // Loop over APA to know which one contains the particle                                                     
    for (size_t it_tpc = 0; it_tpc < geo->NTPC(); ++it_tpc) {
      const geo::TPCGeo & tpc = geo->TPC(it_tpc);

      if (tpc.ContainsPosition(vertex_position)) {
        fVertexAPA = std::floor((float)it_tpc/2);
        //std::cout << "particles is in " << fVertexAPA << std::endl;                                            
        if( fVertexAPA == best_apa ) po210Gen = po210Gen + 1;

      }
    }
  }

  std::cout << "total po210 is: " <<po210Gen <<std::endl;
  pdg << " po210: " <<po210Gen;
  //cpaGen                                                                                                       
  art::Handle<std::vector<simb::MCTruth>> TruthListHandle6;
  std::vector<art::Ptr<simb::MCTruth>> TruthList6;

  if (evt.getByLabel("cpaGen",TruthListHandle6))
    art::fill_ptr_vector(TruthList6,TruthListHandle6);
  // Do we need another loop over MCTruth objects?                                                               
  art::Ptr<simb::MCTruth> mct6 = TruthList6[0];
  //std::cout<< "truth list size" << TruthList2.size() << std::endl;                                             
  //std::cout<< "mct nparticles " << mct2->NParticles() << std::endl;                                            
  // Loop over particles ib MCTruth                                                                              
  for (int it = 0; it < mct6->NParticles(); ++it) {
    simb::MCParticle part = mct6->GetParticle(it);
    //std::cout << "PDG " << part.PdgCode() << std::endl;                                                        

    TVector3 vertex_position = mct6->GetParticle(it).Position(0).Vect();
    //std::cout<<vertex_position.x() <<"," <<vertex_position.y() <<"," <<vertex_position.z() <<std::endl;        
    // Loop over APA to know which one contains the particle                                                     
    for (size_t it_tpc = 0; it_tpc < geo->NTPC(); ++it_tpc) {
      const geo::TPCGeo & tpc = geo->TPC(it_tpc);

      if (tpc.ContainsPosition(vertex_position)) {
        fVertexAPA = std::floor((float)it_tpc/2);
        //std::cout << "particles is in " << fVertexAPA << std::endl;                                            
        if( fVertexAPA == best_apa ) cpaGen = cpaGen + 1;

      }
    }
  }
  pdg << " cpa: " <<cpaGen;
  std::cout << "total cpa is: " <<cpaGen <<std::endl;

  //apaGen                                                                                                        
  art::Handle<std::vector<simb::MCTruth>> TruthListHandle7;
  std::vector<art::Ptr<simb::MCTruth>> TruthList7;


  if (evt.getByLabel("apaGen",TruthListHandle7))
    art::fill_ptr_vector(TruthList7,TruthListHandle7);
  // Do we need another loop over MCTruth objects?                                                               
  art::Ptr<simb::MCTruth> mct7 = TruthList7[0];
  //std::cout<< "truth list size" << TruthList2.size() << std::endl;                                             
  std::cout<< "total apagen in ALL APAS IS: " << mct7->NParticles() << std::endl;
  // Loop over particles ib MCTruth                                                                              
  for (int it = 0; it < mct7->NParticles(); ++it) {
    simb::MCParticle part = mct7->GetParticle(it);
    //std::cout << "PDG " << part.PdgCode() << std::endl;                                                        

    TVector3 vertex_position = mct7->GetParticle(it).Position(0).Vect();
    //std::cout<<vertex_position.x() <<"," <<vertex_position.y() <<"," <<vertex_position.z() <<std::endl;        
    // Loop over APA to know which one contains the particle                                                     
    for (size_t it_tpc = 0; it_tpc < geo->NTPC(); ++it_tpc) {
      const geo::TPCGeo & tpc = geo->TPC(it_tpc);

      if (tpc.ContainsPosition(vertex_position)) {
        fVertexAPA = std::floor((float)it_tpc/2);
        //std::cout << "particles is in " << fVertexAPA << std::endl;                                            
        if( fVertexAPA == best_apa ) apaGen = apaGen + 1;

      }
    }
  }
  pdg << " apa: " << apaGen;
  std::cout << "total apa is: " <<apaGen <<std::endl;

  //cNeutronGen                                                                                                  
  art::Handle<std::vector<simb::MCTruth>> TruthListHandle8;
  std::vector<art::Ptr<simb::MCTruth>> TruthList8;
  if (evt.getByLabel("cNeutronGen",TruthListHandle8))
    art::fill_ptr_vector(TruthList8,TruthListHandle8);
  // Do we need another loop over MCTruth objects?                                                               
  art::Ptr<simb::MCTruth> mct8 = TruthList8[0];
  //std::cout<< "truth list size" << TruthList2.size() << std::endl;                                             
  std::cout<< "total neutrons in ALL APAS is: " << mct8->NParticles() << std::endl;
  // Loop over particles ib MCTruth                                                                              
  for (int it = 0; it < mct8->NParticles(); ++it) {
    simb::MCParticle part = mct8->GetParticle(it);
    //std::cout << "PDG " << part.PdgCode() << std::endl;                                                        

    TVector3 vertex_position = mct8->GetParticle(it).Position(0).Vect();
    //std::cout<<vertex_position.x() <<"," <<vertex_position.y() <<"," <<vertex_position.z() <<std::endl;        
    // Loop over APA to know which one contains the particle                                                     
    for (size_t it_tpc = 0; it_tpc < geo->NTPC(); ++it_tpc) {
      const geo::TPCGeo & tpc = geo->TPC(it_tpc);

      if (tpc.ContainsPosition(vertex_position)) {
        fVertexAPA = std::floor((float)it_tpc/2);
        //std::cout << "particles is in " << fVertexAPA << std::endl;                                            
        if( fVertexAPA == best_apa ) cNeutronGen = cNeutronGen + 1;

      } 
    }
  }

  std::cout << "total cNeutron is: " << cNeutronGen <<std::endl;
  pdg << " neutron: " <<cNeutronGen <<std::endl;
  std::cout<<"neutron appended to file: "<<std::endl;
  pdg.close();

  //
  roi.EnergyDeposit(0.);
  roi.Momentum(ar39Gen,ar42Gen,kr85Gen);
  roi.ParentPosition(rn222Gen, po210Gen, cpaGen, apaGen);
  roi.ParentMomentum(cNeutronGen, 0.,0.);

  std::cout << "autoroi done" << std::endl;
  roi_v->Emplace(std::move(roi));
  std::cout << "second emplace done" << std::endl;
  fMgr.save_entry();
  std::cout << "save entry done" << std::endl;
} // function LArCVMaker::analyze

DEFINE_ART_MODULE(LArCVMaker)

} // namespace nnbar

